
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import syntaxtree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiniJavaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiniJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiniJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\004\000\002\004\002\000\002\005\010" +
    "\000\002\005\012\000\002\006\004\000\002\006\002\000" +
    "\002\007\007\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\010\004\000\002\010\002\000\002\011" +
    "\021\000\002\011\017\000\002\011\017\000\002\011\017" +
    "\000\002\012\007\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\002\000\002\013\004\000\002" +
    "\013\002\000\002\014\007\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\015\004\000\002\015\002" +
    "\000\002\016\005\000\002\016\011\000\002\016\007\000" +
    "\002\016\007\000\002\016\006\000\002\016\011\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\006\000\002\022\005" +
    "\000\002\022\010\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\007\000\002\022\006\000\002\022\004\000\002\022" +
    "\005\000\002\017\004\000\002\017\002\000\002\021\004" +
    "\000\002\021\002\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\011\005\001\002\000\004\002\311\001" +
    "\002\000\004\050\271\001\002\000\006\002\ufffd\011\ufffd" +
    "\001\002\000\006\002\000\011\011\001\002\000\006\002" +
    "\ufffe\011\ufffe\001\002\000\004\050\012\001\002\000\006" +
    "\012\014\033\013\001\002\000\014\004\ufff9\017\ufff9\020" +
    "\ufff9\034\ufff9\050\ufff9\001\002\000\004\050\015\001\002" +
    "\000\004\033\016\001\002\000\014\004\ufff9\017\ufff9\020" +
    "\ufff9\034\ufff9\050\ufff9\001\002\000\014\004\ufff3\017\024" +
    "\020\023\034\ufff3\050\020\001\002\000\004\050\204\001" +
    "\002\000\006\004\037\034\036\001\002\000\026\004\ufffa" +
    "\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\033" +
    "\ufffa\034\ufffa\050\ufffa\001\002\000\004\050\033\001\002" +
    "\000\006\031\026\050\025\001\002\000\004\037\032\001" +
    "\002\000\004\032\027\001\002\000\004\050\030\001\002" +
    "\000\004\037\031\001\002\000\026\004\ufff8\013\ufff8\014" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\033\ufff8\034\ufff8" +
    "\050\ufff8\001\002\000\026\004\ufff6\013\ufff6\014\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\033\ufff6\034\ufff6\050\ufff6" +
    "\001\002\000\004\037\034\001\002\000\026\004\ufff7\013" +
    "\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\033\ufff7" +
    "\034\ufff7\050\ufff7\001\002\000\006\004\ufff4\034\ufff4\001" +
    "\002\000\006\002\ufffb\011\ufffb\001\002\000\010\017\042" +
    "\020\041\050\040\001\002\000\004\050\253\001\002\000" +
    "\004\050\240\001\002\000\006\031\044\050\043\001\002" +
    "\000\004\027\226\001\002\000\004\032\045\001\002\000" +
    "\004\050\046\001\002\000\004\027\047\001\002\000\012" +
    "\017\053\020\052\030\uffea\050\051\001\002\000\004\030" +
    "\101\001\002\000\004\050\077\001\002\000\004\050\075" +
    "\001\002\000\006\031\055\050\054\001\002\000\006\030" +
    "\uffe8\035\uffe8\001\002\000\004\032\056\001\002\000\004" +
    "\050\057\001\002\000\006\030\uffe8\035\uffe8\001\002\000" +
    "\006\030\uffee\035\061\001\002\000\010\017\065\020\064" +
    "\050\063\001\002\000\006\030\uffe9\035\uffe9\001\002\000" +
    "\004\050\073\001\002\000\004\050\072\001\002\000\006" +
    "\031\067\050\066\001\002\000\006\030\uffe5\035\uffe5\001" +
    "\002\000\004\032\070\001\002\000\004\050\071\001\002" +
    "\000\006\030\uffe7\035\uffe7\001\002\000\006\030\uffe6\035" +
    "\uffe6\001\002\000\006\030\uffe4\035\uffe4\001\002\000\006" +
    "\030\uffec\035\061\001\002\000\006\030\uffe8\035\uffe8\001" +
    "\002\000\006\030\uffed\035\061\001\002\000\006\030\uffe8" +
    "\035\uffe8\001\002\000\006\030\uffeb\035\061\001\002\000" +
    "\004\033\102\001\002\000\022\013\ufff9\014\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\033\ufff9\050\ufff9\001\002\000" +
    "\022\013\uffe2\014\107\016\105\017\024\020\023\021\106" +
    "\033\104\050\110\001\002\000\016\014\107\016\105\021" +
    "\106\033\104\034\uffe2\050\172\001\002\000\004\027\220" +
    "\001\002\000\004\027\214\001\002\000\004\027\206\001" +
    "\002\000\010\031\174\045\173\050\204\001\002\000\020" +
    "\013\uffe2\014\107\016\105\021\106\033\104\034\uffe2\050" +
    "\172\001\002\000\004\013\113\001\002\000\022\023\116" +
    "\024\117\025\115\026\121\027\124\046\123\047\114\050" +
    "\120\001\002\000\030\030\uffd3\031\uffd3\032\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\001\002\000\006\017\163\050\162\001\002\000\030" +
    "\030\uffd2\031\uffd2\032\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\001\002\000\030" +
    "\030\uffd1\031\uffd1\032\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\001\002\000\030" +
    "\030\uffd0\031\uffd0\032\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\030" +
    "\030\uffcf\031\uffcf\032\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002\000\022" +
    "\031\133\036\135\037\160\040\134\041\130\042\131\043" +
    "\127\044\132\001\002\000\022\023\116\024\117\025\115" +
    "\026\121\027\124\046\123\047\114\050\120\001\002\000" +
    "\022\023\116\024\117\025\115\026\121\027\124\046\123" +
    "\047\114\050\120\001\002\000\022\030\126\031\133\036" +
    "\135\040\134\041\130\042\131\043\127\044\132\001\002" +
    "\000\030\030\uffcb\031\uffcb\032\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002" +
    "\000\022\023\116\024\117\025\115\026\121\027\124\046" +
    "\123\047\114\050\120\001\002\000\022\023\116\024\117" +
    "\025\115\026\121\027\124\046\123\047\114\050\120\001" +
    "\002\000\022\023\116\024\117\025\115\026\121\027\124" +
    "\046\123\047\114\050\120\001\002\000\022\023\116\024" +
    "\117\025\115\026\121\027\124\046\123\047\114\050\120" +
    "\001\002\000\022\023\116\024\117\025\115\026\121\027" +
    "\124\046\123\047\114\050\120\001\002\000\022\023\116" +
    "\024\117\025\115\026\121\027\124\046\123\047\114\050" +
    "\120\001\002\000\006\022\137\050\136\001\002\000\004" +
    "\027\140\001\002\000\030\030\uffd5\031\uffd5\032\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\001\002\000\024\023\116\024\117\025\115\026" +
    "\121\027\124\030\uffc9\046\123\047\114\050\120\001\002" +
    "\000\004\030\147\001\002\000\024\030\uffc7\031\133\035" +
    "\uffc7\036\135\040\134\041\130\042\131\043\127\044\132" +
    "\001\002\000\006\030\uffca\035\144\001\002\000\022\023" +
    "\116\024\117\025\115\026\121\027\124\046\123\047\114" +
    "\050\120\001\002\000\006\030\uffc8\035\uffc8\001\002\000" +
    "\024\030\uffc6\031\133\035\uffc6\036\135\040\134\041\130" +
    "\042\131\043\127\044\132\001\002\000\030\030\uffd4\031" +
    "\uffd4\032\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\001\002\000\030\030\uffd9\031" +
    "\133\032\uffd9\035\uffd9\036\135\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\001\002\000\022\031\133\032" +
    "\152\036\135\040\134\041\130\042\131\043\127\044\132" +
    "\001\002\000\030\030\uffd6\031\uffd6\032\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\001\002\000\030\030\uffd7\031\133\032\uffd7\035\uffd7\036" +
    "\135\037\uffd7\040\134\041\130\042\131\043\uffd7\044\uffd7" +
    "\001\002\000\030\030\uffda\031\133\032\uffda\035\uffda\036" +
    "\135\037\uffda\040\134\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\001\002\000\030\030\uffdb\031\133\032\uffdb\035\uffdb\036" +
    "\135\037\uffdb\040\134\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\001\002\000\030\030\uffd8\031\133\032\uffd8\035\uffd8\036" +
    "\135\037\uffd8\040\134\041\130\042\131\043\uffd8\044\132" +
    "\001\002\000\030\030\uffcc\031\133\032\uffcc\035\uffcc\036" +
    "\135\037\uffcc\040\134\041\130\042\131\043\uffcc\044\132" +
    "\001\002\000\004\034\161\001\002\000\006\004\ufff2\034" +
    "\ufff2\001\002\000\004\027\167\001\002\000\004\031\164" +
    "\001\002\000\022\023\116\024\117\025\115\026\121\027" +
    "\124\046\123\047\114\050\120\001\002\000\022\031\133" +
    "\032\166\036\135\040\134\041\130\042\131\043\127\044" +
    "\132\001\002\000\030\030\uffce\031\uffce\032\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\001\002\000\004\030\170\001\002\000\030\030\uffcd" +
    "\031\uffcd\032\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000\006\013\uffe3" +
    "\034\uffe3\001\002\000\006\031\174\045\173\001\002\000" +
    "\022\023\116\024\117\025\115\026\121\027\124\046\123" +
    "\047\114\050\120\001\002\000\022\023\116\024\117\025" +
    "\115\026\121\027\124\046\123\047\114\050\120\001\002" +
    "\000\022\031\133\032\176\036\135\040\134\041\130\042" +
    "\131\043\127\044\132\001\002\000\004\045\177\001\002" +
    "\000\022\023\116\024\117\025\115\026\121\027\124\046" +
    "\123\047\114\050\120\001\002\000\022\031\133\036\135" +
    "\037\201\040\134\041\130\042\131\043\127\044\132\001" +
    "\002\000\022\013\uffdc\014\uffdc\015\uffdc\016\uffdc\021\uffdc" +
    "\033\uffdc\034\uffdc\050\uffdc\001\002\000\022\031\133\036" +
    "\135\037\203\040\134\041\130\042\131\043\127\044\132" +
    "\001\002\000\022\013\uffdd\014\uffdd\015\uffdd\016\uffdd\021" +
    "\uffdd\033\uffdd\034\uffdd\050\uffdd\001\002\000\004\037\205" +
    "\001\002\000\026\004\ufff5\013\ufff5\014\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\033\ufff5\034\ufff5\050\ufff5\001\002" +
    "\000\022\023\116\024\117\025\115\026\121\027\124\046" +
    "\123\047\114\050\120\001\002\000\022\030\210\031\133" +
    "\036\135\040\134\041\130\042\131\043\127\044\132\001" +
    "\002\000\014\014\107\016\105\021\106\033\104\050\172" +
    "\001\002\000\004\015\212\001\002\000\014\014\107\016" +
    "\105\021\106\033\104\050\172\001\002\000\022\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\021\uffe0\033\uffe0\034\uffe0\050" +
    "\uffe0\001\002\000\022\023\116\024\117\025\115\026\121" +
    "\027\124\046\123\047\114\050\120\001\002\000\022\030" +
    "\216\031\133\036\135\040\134\041\130\042\131\043\127" +
    "\044\132\001\002\000\004\037\217\001\002\000\022\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\021\uffde\033\uffde\034\uffde" +
    "\050\uffde\001\002\000\022\023\116\024\117\025\115\026" +
    "\121\027\124\046\123\047\114\050\120\001\002\000\022" +
    "\030\222\031\133\036\135\040\134\041\130\042\131\043" +
    "\127\044\132\001\002\000\014\014\107\016\105\021\106" +
    "\033\104\050\172\001\002\000\022\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\021\uffdf\033\uffdf\034\uffdf\050\uffdf\001\002" +
    "\000\004\034\225\001\002\000\022\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\021\uffe1\033\uffe1\034\uffe1\050\uffe1\001\002" +
    "\000\012\017\053\020\052\030\uffea\050\051\001\002\000" +
    "\004\030\230\001\002\000\004\033\231\001\002\000\022" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\033" +
    "\ufff9\050\ufff9\001\002\000\022\013\uffe2\014\107\016\105" +
    "\017\024\020\023\021\106\033\104\050\110\001\002\000" +
    "\004\013\234\001\002\000\022\023\116\024\117\025\115" +
    "\026\121\027\124\046\123\047\114\050\120\001\002\000" +
    "\022\031\133\036\135\037\236\040\134\041\130\042\131" +
    "\043\127\044\132\001\002\000\004\034\237\001\002\000" +
    "\006\004\ufff0\034\ufff0\001\002\000\004\027\241\001\002" +
    "\000\012\017\053\020\052\030\uffea\050\051\001\002\000" +
    "\004\030\243\001\002\000\004\033\244\001\002\000\022" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\033" +
    "\ufff9\050\ufff9\001\002\000\022\013\uffe2\014\107\016\105" +
    "\017\024\020\023\021\106\033\104\050\110\001\002\000" +
    "\004\013\247\001\002\000\022\023\116\024\117\025\115" +
    "\026\121\027\124\046\123\047\114\050\120\001\002\000" +
    "\022\031\133\036\135\037\251\040\134\041\130\042\131" +
    "\043\127\044\132\001\002\000\004\034\252\001\002\000" +
    "\006\004\ufff1\034\ufff1\001\002\000\004\027\254\001\002" +
    "\000\012\017\053\020\052\030\uffea\050\051\001\002\000" +
    "\004\030\256\001\002\000\004\033\257\001\002\000\022" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\033" +
    "\ufff9\050\ufff9\001\002\000\022\013\uffe2\014\107\016\105" +
    "\017\024\020\023\021\106\033\104\050\110\001\002\000" +
    "\004\013\262\001\002\000\022\023\116\024\117\025\115" +
    "\026\121\027\124\046\123\047\114\050\120\001\002\000" +
    "\022\031\133\036\135\037\264\040\134\041\130\042\131" +
    "\043\127\044\132\001\002\000\004\034\265\001\002\000" +
    "\006\004\uffef\034\uffef\001\002\000\014\004\ufff3\017\024" +
    "\020\023\034\ufff3\050\020\001\002\000\006\004\037\034" +
    "\270\001\002\000\006\002\ufffc\011\ufffc\001\002\000\004" +
    "\033\272\001\002\000\004\004\273\001\002\000\004\005" +
    "\274\001\002\000\004\006\275\001\002\000\004\007\276" +
    "\001\002\000\004\027\277\001\002\000\004\010\300\001" +
    "\002\000\004\031\301\001\002\000\004\032\302\001\002" +
    "\000\004\050\303\001\002\000\004\030\304\001\002\000" +
    "\004\033\305\001\002\000\014\014\107\016\105\021\106" +
    "\033\104\050\172\001\002\000\004\034\307\001\002\000" +
    "\004\034\310\001\002\000\006\002\uffff\011\uffff\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\006\001\001\000\004" +
    "\005\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\016\001\001\000\006\007" +
    "\021\010\020\001\001\000\002\001\001\000\004\011\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\057\001\001\000\004" +
    "\014\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\061" +
    "\001\001\000\004\013\075\001\001\000\004\014\061\001" +
    "\001\000\004\013\077\001\001\000\004\014\061\001\001" +
    "\000\002\001\001\000\004\006\102\001\001\000\010\007" +
    "\021\015\111\016\110\001\001\000\006\015\223\016\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\170\016\110\001\001" +
    "\000\002\001\001\000\004\022\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\156\001\001\000\004\022\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\155\001\001\000" +
    "\004\022\154\001\001\000\004\022\153\001\001\000\004" +
    "\022\152\001\001\000\004\022\150\001\001\000\004\022" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\140\022\141\001\001\000\002\001" +
    "\001\000\004\021\142\001\001\000\004\020\144\001\001" +
    "\000\004\022\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\201\001\001\000\004" +
    "\022\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\206\001\001\000\002\001\001" +
    "\000\004\016\210\001\001\000\002\001\001\000\004\016" +
    "\212\001\001\000\002\001\001\000\004\022\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\220\001\001\000\002\001\001\000\004\016\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\231\001\001\000\010\007\021\015" +
    "\232\016\110\001\001\000\002\001\001\000\004\022\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\244\001\001\000" +
    "\010\007\021\015\245\016\110\001\001\000\002\001\001" +
    "\000\004\022\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\257\001\001\000\010\007\021\015\260\016\110\001\001" +
    "\000\002\001\001\000\004\022\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\021" +
    "\010\266\001\001\000\004\011\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  MiniJavaLexer lexer;

  public MiniJavaParser( MiniJavaLexer lex) {
      super(lex);
      lexer = lex;
  }

  public void report_error(String message, Object info) {
    
    System.out.print(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    System.err.println(" at line "+symbol.left+", column "+symbol.right);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiniJavaParser$actions {
  private final MiniJavaParser parser;

  /** Constructor */
  CUP$MiniJavaParser$actions(MiniJavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiniJavaParser$do_action_part00000000(
    int                        CUP$MiniJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniJavaParser$parser,
    java.util.Stack            CUP$MiniJavaParser$stack,
    int                        CUP$MiniJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$MiniJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniJavaParser$parser.done_parsing();
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main_class class_list 
            {
              Program RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDeclList l = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Program result  = new Program(main, l);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 
		MainClass result  = new MainClass(new Identifier(id), new Identifier(arg), s);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("main_class",1, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class_decl 
            {
              ClassDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ClassDeclList l = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		ClassDeclList temp;
		if(l == null) {
			temp = new ClassDeclList();
		}
		else {
			temp = l;
		}
		temp.addElement(c);
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_list",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= 
            {
              ClassDeclList RESULT =null;
		
		ClassDeclList result  = new ClassDeclList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_list",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_decl ::= CLASS ID LBRACE var_decl_list method_decl_list RBRACE 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		ClassDeclSimple result  = new ClassDeclSimple(new Identifier(name), vars, methods);
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_decl ::= CLASS ID EXTENDS ID LBRACE var_decl_list method_decl_list RBRACE 
            {
              ClassDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int supleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		String sup = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		ClassDeclExtends result  = new ClassDeclExtends(new Identifier(name), new Identifier(sup), vars, methods);
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decl_list ::= var_decl_list var_decl 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		VarDeclList temp;
		if(l == null) {
			temp = new VarDeclList();
		}
		else {
			temp = l;
		}
		temp.addElement(v);
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl_list",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decl_list ::= 
            {
              VarDeclList RESULT =null;
		
		VarDeclList result  = new VarDeclList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl_list",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= INT LBRACKET RBRACKET ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		VarDecl result  = new VarDecl(new IntArrayType(), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= BOOLEAN ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		VarDecl result  = new VarDecl(new BooleanType(), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= INT ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		VarDecl result  = new VarDecl(new IntegerType(), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_decl ::= ID ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		VarDecl result  = new VarDecl(new IdentifierType(type), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var_decl",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl_list ::= method_decl_list method_decl 
            {
              MethodDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList l = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		MethodDeclList temp;
		if(l == null) {
			temp = new MethodDeclList();
		}
		else {
			temp = l;
		}
		temp.addElement(m);
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl_list",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl_list ::= 
            {
              MethodDeclList RESULT =null;
		
		MethodDeclList result  = new MethodDeclList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl_list",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decl ::= PUBLIC INT LBRACKET RBRACKET ID LPAREN formal_list RPAREN LBRACE var_decl_list statement_list RETURN expr SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		FormalList f = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
		MethodDecl result  = new MethodDecl(new IntArrayType(), new Identifier(name), f, v, s, e);
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-14)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decl ::= PUBLIC BOOLEAN ID LPAREN formal_list RPAREN LBRACE var_decl_list statement_list RETURN expr SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		FormalList f = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
		MethodDecl result  = new MethodDecl(new BooleanType(), new Identifier(name), f, v, s, e);
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_decl ::= PUBLIC INT ID LPAREN formal_list RPAREN LBRACE var_decl_list statement_list RETURN expr SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		FormalList f = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
		MethodDecl result  = new MethodDecl(new IntegerType(), new Identifier(name), f, v, s, e);
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl ::= PUBLIC ID ID LPAREN formal_list RPAREN LBRACE var_decl_list statement_list RETURN expr SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		FormalList f = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
		MethodDecl result  = new MethodDecl(new IdentifierType(type), new Identifier(name), f, v, s, e);
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal_list ::= INT LBRACKET RBRACKET ID formal_rest_list 
            {
              FormalList RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal f = new Formal(new IntArrayType(), new Identifier(name));
		f.i.setPosition(nameleft, nameright);
		FormalList temp = new FormalList();
		temp.addElement(f);
		if(l != null) {
			for(int i=0; i<l.size(); i++) {
				temp.addElement(l.elementAt(i));
			}
		}
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal_list ::= BOOLEAN ID formal_rest_list 
            {
              FormalList RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal f = new Formal(new BooleanType(), new Identifier(name));
		f.i.setPosition(nameleft, nameright);
		FormalList temp = new FormalList();
		temp.addElement(f);
		if(l != null) {
			for(int i=0; i<l.size(); i++) {
				temp.addElement(l.elementAt(i));
			}
		}
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_list ::= INT ID formal_rest_list 
            {
              FormalList RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal f = new Formal(new IntegerType(), new Identifier(name));
		f.i.setPosition(nameleft, nameright);
		FormalList temp = new FormalList();
		temp.addElement(f);
		if(l != null) {
			for(int i=0; i<l.size(); i++) {
				temp.addElement(l.elementAt(i));
			}
		}
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_list ::= ID ID formal_rest_list 
            {
              FormalList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal f = new Formal(new IdentifierType(type), new Identifier(name));
		f.i.setPosition(nameleft, nameright);
		FormalList temp = new FormalList();
		temp.addElement(f);
		if(l != null) {
			for(int i=0; i<l.size(); i++) {
				temp.addElement(l.elementAt(i));
			}
		}
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_list ::= 
            {
              FormalList RESULT =null;
		
		FormalList result = new FormalList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_list",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal_rest_list ::= formal_rest_list formal_rest 
            {
              FormalList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		FormalList temp;
		if(l == null) {
			temp = new FormalList();
			
		}
		else {
			temp = l;	
		}
		temp.addElement(f);
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest_list",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_rest_list ::= 
            {
              FormalList RESULT =null;
		
		FormalList result  = new FormalList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest_list",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_rest ::= COMMA INT LBRACKET RBRACKET ID 
            {
              Formal RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal result  = new Formal(new IntArrayType(), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_rest ::= COMMA BOOLEAN ID 
            {
              Formal RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal result  = new Formal(new BooleanType(), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_rest ::= COMMA INT ID 
            {
              Formal RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal result  = new Formal(new IntegerType(), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal_rest ::= COMMA ID ID 
            {
              Formal RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		Formal result  = new Formal(new IdentifierType(type), new Identifier(name));
		result.i.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("formal_rest",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_list ::= statement statement_list 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		StatementList temp = new StatementList();
		temp.addElement(s);
		if(l != null) {
			for(int i=0; i<l.size(); i++) {
				temp.addElement(l.elementAt(i));
			}
		}
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list ::= 
            {
              StatementList RESULT =null;
		
		StatementList result  = new StatementList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= LBRACE statement_list RBRACE 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		Block result  = new Block(l);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int if_partleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int if_partright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement if_part = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int else_partleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int else_partright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement else_part = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		If result  = new If(e, if_part, else_part);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= WHILE LPAREN expr RPAREN statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		While result  = new While(e, body);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= PRINTLN LPAREN expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
		Print result  = new Print(e);
		result.setPosition(pleft, pright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= ID EQUAL expr SEMICOLON 
            {
              Statement RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		String rhs = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp lhs = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		Assign result  = new Assign(new Identifier(rhs), lhs);
		result.setPosition(eqleft,eqright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= ID LBRACKET expr RBRACKET EQUAL expr SEMICOLON 
            {
              Statement RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp lhs = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		ArrayAssign result  = new ArrayAssign(new Identifier(array), index, lhs);
		result.setPosition(eqleft,eqright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		Plus result  = new Plus(l, r);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MINUS expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		  
		Minus result  = new Minus(l, r);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr TIMES expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		Times result  = new Times(l, r);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		  
		And result  = new And(l, r);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr LESSTHAN expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		  
		LessThan result  = new LessThan(l, r);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr LBRACKET expr RBRACKET 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 
		ArrayLookup result  = new ArrayLookup(l, index);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr DOT LENGTH 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		ArrayLength result  = new ArrayLength(l);
		result.setPosition(opleft, opright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr DOT ID LPAREN expr_list RPAREN 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList list = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
		Call result  = new Call(l, new Identifier(func), list);
		result.i.setPosition(funcleft, funcright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		  
		IntegerLiteral result  = new IntegerLiteral(i.intValue());
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		True result  = new True();
		result.setPosition(tleft, tright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		False result  = new False();
		result.setPosition(fleft, fright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= ID 
            {
              Exp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		IdentifierExp result  = new IdentifierExp(name);
		result.setPosition(nameleft, nameright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		This result  = new This();
		result.setPosition(tleft, tright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NEW INT LBRACKET expr RBRACKET 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		 
		NewArray result  = new NewArray(size);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= NEW ID LPAREN RPAREN 
            {
              Exp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		 
		NewObject result  = new NewObject(new Identifier(type));
		result.i.setPosition(typeleft, typeright);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= NOT expr 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
		Not result = new Not(r);
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= LPAREN expr RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		  
		RESULT = e;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_list ::= expr expr_rest_list 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		ExpList temp = new ExpList();
		temp.addElement(e);
		if(l != null) {
			for(int i=0; i<l.size(); i++)
			{
				temp.addElement(l.elementAt(i));
			}
		}
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr_list",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_list ::= 
            {
              ExpList RESULT =null;
		
		ExpList result  = new ExpList();
		RESULT = result;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr_list",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_rest_list ::= expr_rest_list expr_rest 
            {
              ExpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		ExpList temp;
		if(l == null) {
			temp = new ExpList();
			
		}
		else {
			temp = l;	
		}
		temp.addElement(e);
		RESULT = temp;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr_rest_list",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_rest_list ::= 
            {
              ExpList RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr_rest_list",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_rest ::= COMMA expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
		RESULT = e;
	
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr_rest",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiniJavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiniJavaParser$do_action(
    int                        CUP$MiniJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniJavaParser$parser,
    java.util.Stack            CUP$MiniJavaParser$stack,
    int                        CUP$MiniJavaParser$top)
    throws java.lang.Exception
    {
              return CUP$MiniJavaParser$do_action_part00000000(
                               CUP$MiniJavaParser$act_num,
                               CUP$MiniJavaParser$parser,
                               CUP$MiniJavaParser$stack,
                               CUP$MiniJavaParser$top);
    }
}

}
